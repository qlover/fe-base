---
description: 
globs: 
alwaysApply: false
---
---
description: Frontend project rules and guidelines
globs: ["**/*"]
---

# Project Communication Guidelines

## Language Usage Rules

### English Required Areas

- Git commits: All commit messages must be in English
- Documentation files (.md): All documentation must be in English
- Code comments: All code comments (including JSDoc/TSDoc) must be in English
- API documentation: All API-related documentation must be in English
- Code-related discussions: All code-related content must be in English

### Chinese Allowed Areas

- Team communication: Daily team communication
- General issue discussions: Non-technical issue content
- Meeting notes: Internal meeting notes

## Documentation Standards

### Markdown File Rules

- All .md files must be written in English
- AI-generated content for .md files must always be wrapped in code blocks
- Use proper markdown formatting and structure
- Content updates must follow this format:

  ```markdown
  // Original content to be replaced
  ```
  
  ```markdown
  // New content
  ```

## Code Comment Standards

### TSDoc/JSDoc Requirements

- Each class/interface comment must include:
  - Significance of existence
  - Core idea
  - Main function
  - Main purpose
  - Code example
- For methods/functions:
  - `@param`: type, purpose, constraints
  - `@returns`: type and description
- All comments must be in English

### Example

```typescript
/**
 * User authentication service
 *
 * Significance: Central authentication management
 * Core idea: Single responsibility for user auth
 * Main function: Handle user login/logout
 * Main purpose: Secure user authentication
 *
 * @example
 * const authService = new AuthService();
 * await authService.login(credentials);
 */
```

## Git Commit Standards

### Format

```
type(scope?): subject

body?

footer?
```

### Length Limits

- Subject line: Maximum 50 characters
- Body line: Maximum 72 characters per line
- Total commit message: Should not exceed 500 characters

### Types

- `feat`: New feature
- `fix`: Bug fix
- `docs`: Documentation changes
- `style`: Code style changes
- `refactor`: Code refactoring
- `perf`: Performance improvements
- `test`: Adding/updating tests
- `chore`: Build tasks, configs, etc

### Rules

- Subject: Must be concise (max 50 chars), present tense, no period
- Scope (Optional): Component name (e.g., auth, api)
- Body (Optional): Wrap text at 72 chars, use bullet points for multiple items
- Footer (Optional): Breaking changes, issues

### Examples

```
feat(auth): implement google oauth login
fix(api): fix session timeout issue
docs: add installation steps
```

## File Organization

- Follow project structure conventions
- Use meaningful file names
- Maintain consistent naming
